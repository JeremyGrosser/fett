#!/usr/bin/env python
# Fett
# A tool for building jails with clone(2) and overlayfs
#
# Copyright 2013 Uber Technologies, Inc.
# MIT License

from stat import *
import collections
import subprocess
import itertools
import argparse
import logging
import fnmatch
import os.path
import os
import random
import time
import sys
import glob

import fett


logging.basicConfig(
        format='%(asctime)s %(name)s %(levelname)s %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S')
log = logging.getLogger('fett')


class Packer(object):
    def __init__(self, output_path, exclude):
        self.output_path = output_path
        self.exclude = exclude

    def create_tar(self, outfile):
        subprocess.check_call(['/bin/tar', '-C', self.output_path, '-czpf', outfile, '.'])

    def cleanup(self, path=None):
        if path is None:
            path = self.output_path
        if not os.path.exists(path):
            return
        for dirpath, dirnames, filenames in os.walk(path):
            for dirname in dirnames:
                self.cleanup(os.path.join(dirpath, dirname))
            for filename in filenames:
                os.remove(os.path.join(dirpath, filename))
            os.rmdir(dirpath)

    def import_glob(self, pattern):
        for filename in glob.glob(pattern):
            if os.path.isdir(filename):
                self.import_glob(filename + '/*')
            else:
                self.import_file(filename)

    def import_file(self, filename):
        if os.path.exists(self.output_path + os.path.abspath(filename)):
            return
        for ex in self.exclude:
            if fnmatch.fnmatch(filename, ex):
                return
        try:
            stat = os.stat(filename)
        except:
            return

        # If the file has an executable bit
        if (stat.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) != 0:
            # Check to see if it starts with #!, if so, import the executable too
            with open(filename, 'r') as fd:
                shebang = fd.readline()
                if shebang.startswith('#!'):
                    binary = shebang[2:].rstrip('\r\n\t')
                    binary = [x for x in binary.split(' ') if x][0]
                    self.import_binary(binary)
                    self.import_text(filename)
                    return
                else:
                    self.import_binary(filename)
                    return
        else:
            # Not an executable, just copy it without looking for a shebang
            self.import_text(filename)

    def import_text(self, filename):
        self.copy(filename)

    def import_binary(self, binary):
        try:
            libs = subprocess.check_output(['/usr/bin/ldd', binary])
        except:
            self.import_text(binary)
            return

        self.copy(binary)
        for lib in libs.split('\n'):
            lib = lib.strip('\t')
            if not lib:
                continue
            if ' => ' in lib:
                name, path = lib.split(' => ', 1)
            else:
                name = None
                path = lib
            path, address = path.split(' (', 1)
            if path:
                self.copy(path)

    def copy(self, readfile):
        writefile = (self.output_path + os.path.abspath(readfile))
        try:
            os.makedirs(os.path.dirname(writefile))
        except:
            pass
        stat = os.stat(readfile)
        with open(readfile, 'rb') as readfd:
            with open(writefile, 'wb') as writefd:
                log.debug('%s -> %s', readfile, writefile)
                writefd.write(readfd.read())

        # this part probably needs root
        os.chmod(writefile, stat.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO))
        os.chown(writefile, stat.st_uid, stat.st_gid)


class Fett(object):
    def __init__(self):
        pass

    def main(self):
        '''
        Entry point for the fett CLI. Uses argparse to implement subcommands
        and options parsing, then delegates control to cmd_ methods to
        perform the logic behind each command.
        '''
        parser = argparse.ArgumentParser()
        parser.add_argument('--debug', '-d', action='store_true')
        subparsers = parser.add_subparsers(dest='subparser')

        parser_pack = subparsers.add_parser('pack', help='Create a new tarball by packing up binaries, scripts, and their shared object dependencies.')
        parser_pack.add_argument('--exclude', '-e', action='append')
        parser_pack.add_argument('output_file')
        parser_pack.add_argument('pattern', nargs='+')

        parser_exec = subparsers.add_parser('exec', help='Unpack the tarballs into path, switch to a new fs/pid/uts namespace, chroot, and exec a command. If a path is not specified, a new directory with a random name is created.')
        parser_exec.add_argument('--path', help='Path to create the jail at, a directory with a random name is created in the current working directory if not specified.', default=None)
        parser_exec.add_argument('tarball', nargs='+', help='One or more tarballs to be unpacked in order before chrooting and executing the given command')
        parser_exec.add_argument('command')

        args = parser.parse_args()

        if args.debug:
            log.setLevel(logging.DEBUG)

        fname = 'cmd_%s' % args.subparser
        func = getattr(self, fname, None)
        if not func:
            log.critical('Unknown command: %s' % args.subparser)
            return -1
        else:
            return func(args)

    def cmd_pack(self, args):
        exclude = args.exclude or []
        packer = Packer('/tmp/fett-%i' % int(time.time() * 1000.0), exclude=exclude)
        for pattern in sorted(args.pattern):
            packer.import_glob(pattern)
        packer.create_tar(args.output_file)
        packer.cleanup()
        return 0

    def _child_thread(self, name, mountpoint, command):
        log.debug('Initializing child thread %s' % name)

        devpath = os.path.join(mountpoint, 'dev')
        if not os.path.exists(devpath):
            os.makedirs(devpath)
        fett.mount('/dev', devpath, 'none', fett.MS_BIND, '')

        try:
            log.debug('chroot(%r)' % mountpoint)
            os.chroot(mountpoint)
            os.chdir('/')
        except os.error as e:
            log.critical('Unable to chroot to %s: %s' % (mountpoint, str(e)))
            return -1

        if not os.path.exists('/proc'):
            os.makedirs('/proc')
        fett.mount('none', '/proc', 'proc', 0, '')

        if not os.path.exists('/sys'):
            os.makedirs('/sys')
        fett.mount('none', '/sys', 'sysfs', 0, '')

        try:
            os.remove('/etc/mtab')
        except os.error as e:
            pass
        
        try:
            fett.sethostname(name)
        except os.error as e:
            log.critical('Unable to set hostname %s: %s' % (name, str(e)))
            return -1

        cmd = command.split(' ')
        env = {
            'TERM': 'xterm',
            'HOME': '/',
        }
        try:
            log.debug('execve(%r, %r, %r)' % (cmd[0], cmd, env))
            os.execve(cmd[0], cmd, env)
            log.error('execve returned. This should never happen')
            return -1
        except os.error as e:
            log.critical('Unable to call execve(%r, %r, %r): %s' % (cmd[0], cmd, env, str(e)))
            return -1


    def cmd_exec(self, args):
        name = random_name()
        if args.path is None:
            path = os.getcwd()
        else:
            path = args.path
        path = os.path.abspath(os.path.join(path, name))

        os.makedirs(path)

        for tarball in args.tarball:
            subprocess.check_call(['/bin/tar', '-C', path, '-xzpf', tarball, '.'])
        
        flags = (
            #fett.CLONE_FILES |
            fett.CLONE_NEWNS |
            fett.CLONE_NEWPID |
            fett.CLONE_NEWUTS |
            fett.CLONE_NEWNET |
            fett.CLONE_VFORK |
            fett.CLONE_VM |
            fett.SIGCHLD
        )
        pid = fett.clone(self._child_thread, (name, path, args.command), flags, 65536)
        log.debug('Cloned PID %i' % pid)
        #fett.unshare(fett.CLONE_NEWNS | fett.CLONE_NEWUTS | fett.CLONE_NEWNET)
            
        #pid = os.fork()
        # parent: wait for child to exit, unmount everything
        log.debug('Forked PID %i' % pid)
        #ret = os.waitpid(pid, 0)
        #log.debug('waitpid returned %i' % ret)
        exitpid, status = os.wait()
        ret = (status >> 16)
        signal = (status & 0x00FF)
        log.debug('PID %i exited with signal=%i code=%i' % (exitpid, signal, ret))
        return 0


def random_name():
    return '%04x' % random.getrandbits(16)


def fsinfo(path):
    total_bytes = 0
    last_modified = 0
    for dirpath, dirnames, filenames in os.walk(path):
        for filename in filenames:
            try:
                path = os.path.join(dirpath, filename)
                st = os.lstat(path)
                total_bytes += st.st_size
                if st.st_mtime > last_modified:
                    last_modified = st.st_mtime
            except os.error:
                pass
    return (total_bytes, last_modified)


def ensure_directory(path):
    if not os.path.exists(path):
        try:
            log.info('Creating directory %s' % path)
            os.makedirs(path)
        except os.error as e:
            log.critical('Unable to create %s: %s' % (path, str(e)))
            return -1
    return 0


def print_columns(seq, max_length=None, padding=2, headers=None):
    seq = [[str(y) for y in x] for x in seq]
    width = collections.defaultdict(int)
    for row in seq:
        for i, col in enumerate(row):
            if len(col) > width[i]:
                width[i] = len(col)

    if max_length is not None:
        for i, v in width.items():
            if v > max_length:
                width[i] = max_length

    if headers:
        seq.insert(0, headers)

    for row in seq:
        for i, col in enumerate(row):
            sys.stdout.write(col.ljust(width[i] + padding, ' '))
        sys.stdout.write('\n')


if __name__ == '__main__':
    maincmd = Fett()
    sys.exit(maincmd.main())
